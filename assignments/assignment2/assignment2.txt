2.10:
2. Only 8 fs are read so it is a 32-bit unsigned int.
3. The largest is 0x7ffffff (0111 1111 1111 1111....) (2147483647).
Adding 1 to this value would give 0x80000000 (1000 0000 0000 ...).
In signed integers, the value contribution of the most significant bit is subtracted instead of added.
So this binary number is (-1 * 1 * 2^15) + (0*2^14) + (0*2^13)..., giving -2147483648.

4. "unsignedInteger" is stored at 0x7efd057c and "bitPattern" is stored at 0x7efd0578.
So bitPattern has 4 bytes 0x7efd0578, 0x7efd0579, 0x7efd057a, 0x7efd057b. Since both are the same type, both get 4 bytes.

2.12:
breakpoint at main() (line 11)
p &anInt : 0x7efff4dc
p/x anInt: 0x01234567
(so the int takes 4 bytes)
p &aFloat: 0x7efff4d8
(so the float takes 4 bytes)
x/x aFloat: 0x4695217c  (0100 0110 1001 0101 0010 0001 0111 1100)
0/1000 1101/(1)00 1010 1001 0000 1011 1110 0
Let's see if this is correct: 19088.743
19088 = 0x4a90

fractional conversion of 0.743:
0.743 * 2 = 1.486 -> 1
0.486 * 2 = 0.972 -> 0
0.972 * 2 = 1.944 -> 1
0.944 * 2 = 1.888 -> 1
0.888 * 2 = 1.776 -> 1
0.776 * 2 = 1.552 -> 1
0.552 * 2 = 1.104 -> 1
0.104 * 2 = 0.208 -> 0
0.208 * 2 = 0.416 -> 0
--- this is where we run out of precision, so our fractional part is an approximation
0.416 * 2 = 0.832 -> 0
0.832 * 2 = 1.664 -> 1
...
So our original float is
-1^0 * 2^(10001101 + 10000000 = 00001101 = 0xd) * 1.0010 1010 0100 0010 11 1110 0
So if we bitshift  1.0010 1010 0100 0010 11 1110 0 14 places left, we get
10010 1010 0100 00.10 11 1110 0
or
0100 1010 1001 0000 . 101111100 = 19088 + (our approximation at 0.743)

How good was our approximation? We bitshift 0.101111100 9 places left to get 380_10.
380/2^9 = 380/512 ~= 0.7422 So we were accurate to 7 significant digits,
which is more than is required by IEEE 754 (the float32 standard)

2.14 AND 2.16 - see programs in associated directories.


